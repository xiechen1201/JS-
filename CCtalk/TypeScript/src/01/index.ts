// 1 typescript 的介绍

/* 
    安装 ts:
    npm i typescript -D

    创建配置文件：
    npx tsc --init

    配置 npm 的脚本命令：
    npm run dev

    TS 是需要转换为 JS 文件才能运行的，是无法直接运行的！
*/

/* 
    TypeScript，缩写 TS，ts 是文件名
    1、是 JS 的超集（超越的集合）。ES3 < ES5 < ES6 < TypeScript，TypeScript 是包括了所有的 ES 的语法特性。
    2、是基于 ESMAScript 的语言规范的
        ECMA 是欧洲计算机制造协会，ECMAScript 是基于 ECMA262 文件（脚本语言规范）的一门语言。
        ES3、5、6 是 ESMAScript 的迭代版本。
        TS 是基于 ESMCScript 语言为基础，进一步拓展的产物。
    3、2012 年微软推出的开源项目，主要应用在框架、商用项目、前端、后端等一切使用 JS 开发的业务。
    4、主要做了什么事情？在 ECMAScript 的基础上拓展了静态类型和完善了面向对象编程。
*/

/* 
    静态类型：在运行之前有一个类型的定义或者推断，例如当前是否正确使用了这个变量。
    例如声明变量为 string 类型，后面赋值为 number 类型，这就是不可取的！

    JS 是一个典型的运行时语言，也就是只有运行的时候才知道哪里发生了错误。
    ES6 的面向对象只实现了一个继承，重载是不行的，多态是没有完全实现的，所以 ES6 的面向对象只能算是一个半成品。
*/

/* 
    5、TS 是在 JS 的基础上建立了运行前的类型检查机制
        JavaScript 泛指 ESMAScript 语言，应该是一门技术。
        TS 的流程大致：
        1、编写 TS 的代码
        2、检查 TS 代码类型（静态类型检查）
        3、编译 TS 代码（编译为 JS 代码）
        4、运行 JS 代码（JS 运行环境）
    6、TS 是有 TS 代码编译器的
*/

/* 
    静态类型检查：
    在代码运行之前检查所有的类型相关错误。例如：TSLint、Flow、ESLint 等

    TS 的内容：类型相关、函数、枚举、接口、类、模块、声明、命名空间、装饰器。

    为什么需要 TS？
    前端项目很大的时候，有一个共同的问题就是维护问题。

    维护问题：
    一个类型，这个类型是干啥的？类型是对对象使用的约束，
    1、一个属性到底存不存在，在 JS 中运行之前是无法准确知道的（除非自己定义的），属性可能是未知的，能不能访问或者能不能调用？
    2、一个函数对参数的传递约定，参数的类型到底是什么才能正常的工作？在 JS 中极有可能很有难判定函数正常工作的参数条件。
    这些未知的信息可能产生的情况导致了对对象的使用者有很多不必要花费的使用成本以及对项目维护的代码分析的成本。

    TS 的存在就是动态的制定了一个更加明确的对对象的使用规范、类型定义、和严格的约束是一个复杂或大型项目维护的基本条件。
*/

// =======

/* const obj = {
  a: 1,
  b: 2
};
// ❌类型“{ a: number; b: number; }”上不存在属性“c”
console.log(obj.c); */

// 这就是静态的类型检查，JS 会直接返回 undefined

// ========

/* // 规范对象的定义
type TypeObj = {
  a: number;
  b: number;
  c: string;
};

let obj: TypeObj = {
  a: 1,
  b: 2,
  // ❌不能将类型“number”分配给类型“string”
  c: 3
}; */

// ======

/* function test(a: number, b: number) {
  return a + b;
}
test("1", "2");
test(1, 2); */
