"use strict";
// 01 TypeScript 的介绍
/*
  搭建 TS 的环境？
  因为 TS 无法直接运行在浏览器上
  TS 需要编译成 JS 才能运行在浏览器上
  TS 编译器：tsc

  tsc：ts config

  安装 TS：npm install typescript

  生成配置文件：npx tsc --init

  然后启动 npm run dev

  新建 src/basic1/index.ts 文件
*/
/*
    TypeScript
    1、是 JS 的超集（超越的集合）。
    2、基于 ECMAScript 的语言规范。
        ECMAScript 是欧洲计算机制造协会，是基于 ECMA262 文件（脚本语言规范）的一门语言，ES3，5，6 都是 ECMAScript 的迭代版本。
        TypeScript 是基于 ECMAScript 语言进一步扩展的产物。
    3、是 2012 年微软公司推出的开源项目，主要应用在框架、商用项目、前端、后端等一切使用 JS 开发的业务。
    4、主要做了什么？在 ECMAScript 的基础上拓展了静态类型和完善了面向对象编程。
        静态类型：有一个类型的定义或者推断，当前是否正常使用了这个变量。例如一个字符串如果赋值为为一个数字，那么就不允许。在运行之前就知道这个变量有没有问题，JS 是一个典型的运行时语言，运行的时候才知道哪里错了。
        面向对象编程：ES6 只实现了一个继承，重载（多态）并没有完全实现，封装性？所以，面向对象相对来说还是个半成品，TS 在这方面完善了面向对象编程
    5、为什么是超集？ES3 是被 ES5 包含的，ES5 < ES6..., TS 是包含了所有的 ES 的语法，是在 ECMAScript 整个语言的外层进行了拓展
    5、JS 是什么？是泛指 ECMAScript 语言，准确来说应该是一门技术
    6、TS 是在 JS 的基础上建立了运行前的类型检查机制，TS 是有 TS 代码编译器的，最终还是必须编译为 JS 代码
        1. 编写 TS 代码
        2. 检查 TS 代码类型（静态类型检查）
            静态类型检查：在代码运行之前检查所有的类型相关错误，例如 TSlint、Flow、CoffeeScript
        3. 编译 TS 代码（编译为 JS 代码）
        4. 运行 JS 代码
    7、TS 的内容：类型相关、函数相关、枚举、接口、类、模块、声明、命名空间、装饰器
    8、为什么需要 TS？前端项目很大，很大的问题就是完成试图相关的工作，出现了维护困难的问题，
        维护出现的问题？一个类型，类型是对对象使用的约束，例如一个属性到底存不存在在 JS 运行之前你是无法准的得知的。能不能访问或者能不能调用是有待讨论的。
        一个函数对参数的传递的约定，在 JS 极有可能很难判断函数正常工作的参数条件
        这些未知的信息可能会导致对对象的使用者有很多不必要花费的使用成本，以及对项目项目维护的代码分析的成本
    9、TS 的存在就是动态制定了一个更加明确的对对象的使用的规范、类型定义和严格的约束是一个复杂或大型项目维护的基础条件
*/
// 例如下面这段代码会进行静态的类型检查，检查对象中的属性是不是被包含，而 JS 会返回 undefined
/* const obj = {
    a: 1,
    b: 2
};
console.log(obj.c); */
// 规范了 obj 对象的定义
/* type TypeObj = {
  a: number;
  b: number;
  c: string;
};
const obj: TypeObj = {
  a: 1,
  b: 2,
  c: "hello"
}; */
// 这种情况，无法得知参数的类型
/* function tet(a, b) {
  return a + b;
}

tet("1", "2");
tet(1, 2); */
// 只需要告诉我参数的类型是什么即可
/* function tet(a: number, b: number) {
  return a + b;
}
tet("1", "2");
tet(1, 2); */
// 再比如更改变量的类型，可能会导致下面的程序使用 a 的时候出现错误。
// 符合了静态的类型检查，运行之前就可以知道哪里错了
/* let a = 1;
a = "1"; */
